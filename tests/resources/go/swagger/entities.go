// Code generated by github.com/swaggest/go-code-builder, DO NOT EDIT.

package swagger

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"regexp"
	"strings"
)

// SwaggerSchema structure is generated from "#".
//
// A JSON Schema for Swagger 2.0 API.
type SwaggerSchema struct {
	Info                *Info                                              `json:"info,omitempty"`                // General information about the API.
	Host                string                                             `json:"host,omitempty"`                // The host (name or ip) of the API. Example: 'swagger.io'
	BasePath            string                                             `json:"basePath,omitempty"`            // The base path to the API. Example: '/api'.
	Schemes             []SchemesListItems                                 `json:"schemes,omitempty"`             // The transfer protocol of the API.
	Consumes            []string                                           `json:"consumes,omitempty"`            // A list of MIME types accepted by the API.
	Produces            []string                                           `json:"produces,omitempty"`            // A list of MIME types the API can produce.
	Paths               *Paths                                             `json:"paths,omitempty"`               // Relative paths to the individual endpoints. They must be relative to the 'basePath'.
	Definitions         map[string]Schema                                  `json:"definitions,omitempty"`         // One or more JSON objects describing the schemas being consumed and produced by the API.
	Parameters          map[string]Parameter                               `json:"parameters,omitempty"`          // One or more JSON representations for parameters
	Responses           map[string]Response                                `json:"responses,omitempty"`           // One or more JSON representations for parameters
	Security            []map[string][]string                              `json:"security,omitempty"`
	SecurityDefinitions map[string]SecurityDefinitionsAdditionalProperties `json:"securityDefinitions,omitempty"`
	Tags                []Tag                                              `json:"tags,omitempty"`
	ExternalDocs        *ExternalDocs                                      `json:"externalDocs,omitempty"`        // information about external documentation
	MapOfAnything       map[string]interface{}                             `json:"-"`                             // Key must match pattern: ^x-
}

type marshalSwaggerSchema SwaggerSchema

// UnmarshalJSON decodes JSON.
func (i *SwaggerSchema) UnmarshalJSON(data []byte) error {
	ii := marshalSwaggerSchema(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"info",
			"host",
			"basePath",
			"schemes",
			"consumes",
			"produces",
			"paths",
			"definitions",
			"parameters",
			"responses",
			"security",
			"securityDefinitions",
			"tags",
			"externalDocs",
			"swagger",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["swagger"]; !ok || string(v) != `"2.0"` {
		return fmt.Errorf(`bad or missing const value for "swagger" ("2.0" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = SwaggerSchema(ii)

	return err
}

var (
	// constSwaggerSchema is unconditionally added to JSON.
	constSwaggerSchema = json.RawMessage(`{"swagger":"2.0"}`)
)

// MarshalJSON encodes JSON.
func (i SwaggerSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(constSwaggerSchema, marshalSwaggerSchema(i), i.MapOfAnything)
}

// Info structure is generated from "#/definitions/info".
//
// General information about the API.
type Info struct {
	Title          string                 `json:"title,omitempty"`          // A unique and precise title of the API.
	Version        string                 `json:"version,omitempty"`        // A semantic version number of the API.
	Description    string                 `json:"description,omitempty"`    // A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.
	TermsOfService string                 `json:"termsOfService,omitempty"` // The terms of service for the API.
	Contact        *Contact               `json:"contact,omitempty"`        // Contact information for the owners of the API.
	License        *License               `json:"license,omitempty"`
	MapOfAnything  map[string]interface{} `json:"-"`                        // Key must match pattern: ^x-
}

type marshalInfo Info

// UnmarshalJSON decodes JSON.
func (i *Info) UnmarshalJSON(data []byte) error {
	ii := marshalInfo(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"title",
			"version",
			"description",
			"termsOfService",
			"contact",
			"license",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Info(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Info) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalInfo(i), i.MapOfAnything)
}

// Contact structure is generated from "#/definitions/contact".
//
// Contact information for the owners of the API.
type Contact struct {
	Name          string                 `json:"name,omitempty"`  // The identifying name of the contact person/organization.
	URL           string                 `json:"url,omitempty"`   // The URL pointing to the contact information.
	Email         string                 `json:"email,omitempty"` // The email address of the contact person/organization.
	MapOfAnything map[string]interface{} `json:"-"`               // Key must match pattern: ^x-
}

type marshalContact Contact

// UnmarshalJSON decodes JSON.
func (i *Contact) UnmarshalJSON(data []byte) error {
	ii := marshalContact(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"name",
			"url",
			"email",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Contact(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Contact) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalContact(i), i.MapOfAnything)
}

// License structure is generated from "#/definitions/license".
type License struct {
	Name          string                 `json:"name,omitempty"` // The name of the license type. It's encouraged to use an OSI compatible license.
	URL           string                 `json:"url,omitempty"`  // The URL pointing to the license.
	MapOfAnything map[string]interface{} `json:"-"`              // Key must match pattern: ^x-
}

type marshalLicense License

// UnmarshalJSON decodes JSON.
func (i *License) UnmarshalJSON(data []byte) error {
	ii := marshalLicense(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"name",
			"url",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = License(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i License) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalLicense(i), i.MapOfAnything)
}

// Paths structure is generated from "#/definitions/paths".
//
// Relative paths to the individual endpoints. They must be relative to the 'basePath'.
type Paths struct {
	MapOfAnything       map[string]interface{} `json:"-"` // Key must match pattern: ^x-
	MapOfPathItemValues map[string]PathItem    `json:"-"` // Key must match pattern: ^/
}

type marshalPaths Paths

// UnmarshalJSON decodes JSON.
func (i *Paths) UnmarshalJSON(data []byte) error {

	err := unionMap{
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &i.MapOfAnything, // ^x-
			regex: &i.MapOfPathItemValues, // ^/
		},
		jsonData: data,
	}.unmarshal()


	return err
}

// MarshalJSON encodes JSON.
func (i Paths) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalPaths(i), i.MapOfAnything, i.MapOfPathItemValues)
}

// PathItem structure is generated from "#/definitions/pathItem".
type PathItem struct {
	Ref           string                 `json:"$ref,omitempty"`
	Get           *Operation             `json:"get,omitempty"`
	Put           *Operation             `json:"put,omitempty"`
	Post          *Operation             `json:"post,omitempty"`
	Delete        *Operation             `json:"delete,omitempty"`
	Options       *Operation             `json:"options,omitempty"`
	Head          *Operation             `json:"head,omitempty"`
	Patch         *Operation             `json:"patch,omitempty"`
	Parameters    []ParametersListItems  `json:"parameters,omitempty"` // The parameters needed to send a valid API call.
	MapOfAnything map[string]interface{} `json:"-"`                    // Key must match pattern: ^x-
}

type marshalPathItem PathItem

// UnmarshalJSON decodes JSON.
func (i *PathItem) UnmarshalJSON(data []byte) error {
	ii := marshalPathItem(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"$ref",
			"get",
			"put",
			"post",
			"delete",
			"options",
			"head",
			"patch",
			"parameters",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = PathItem(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i PathItem) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalPathItem(i), i.MapOfAnything)
}

// Operation structure is generated from "#/definitions/operation".
type Operation struct {
	Tags          []string               `json:"tags,omitempty"`
	Summary       string                 `json:"summary,omitempty"`      // A brief summary of the operation.
	Description   string                 `json:"description,omitempty"`  // A longer description of the operation, GitHub Flavored Markdown is allowed.
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // information about external documentation
	ID            string                 `json:"operationId,omitempty"`  // A unique identifier of the operation.
	Produces      []string               `json:"produces,omitempty"`     // A list of MIME types the API can produce.
	Consumes      []string               `json:"consumes,omitempty"`     // A list of MIME types the API can consume.
	Parameters    []ParametersListItems  `json:"parameters,omitempty"`   // The parameters needed to send a valid API call.
	Responses     *Responses             `json:"responses,omitempty"`    // Response objects names can either be any valid HTTP status code or 'default'.
	Schemes       []SchemesListItems     `json:"schemes,omitempty"`      // The transfer protocol of the API.
	Deprecated    bool                   `json:"deprecated,omitempty"`
	Security      []map[string][]string  `json:"security,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                      // Key must match pattern: ^x-
}

type marshalOperation Operation

// UnmarshalJSON decodes JSON.
func (i *Operation) UnmarshalJSON(data []byte) error {
	ii := marshalOperation(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"tags",
			"summary",
			"description",
			"externalDocs",
			"operationId",
			"produces",
			"consumes",
			"parameters",
			"responses",
			"schemes",
			"deprecated",
			"security",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Operation(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Operation) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOperation(i), i.MapOfAnything)
}

// ExternalDocs structure is generated from "#/definitions/externalDocs".
//
// information about external documentation.
type ExternalDocs struct {
	Description   string                 `json:"description,omitempty"`
	URL           string                 `json:"url,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalExternalDocs ExternalDocs

// UnmarshalJSON decodes JSON.
func (i *ExternalDocs) UnmarshalJSON(data []byte) error {
	ii := marshalExternalDocs(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"description",
			"url",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = ExternalDocs(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i ExternalDocs) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalExternalDocs(i), i.MapOfAnything)
}

// BodyParameter structure is generated from "#/definitions/bodyParameter".
type BodyParameter struct {
	Description   string                 `json:"description,omitempty"` // A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
	Name          string                 `json:"name,omitempty"`        // The name of the parameter.
	Required      bool                   `json:"required,omitempty"`    // Determines whether or not this parameter is required or optional.
	Schema        *Schema                `json:"schema,omitempty"`      // A deterministic version of a JSON Schema object.
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalBodyParameter BodyParameter

// UnmarshalJSON decodes JSON.
func (i *BodyParameter) UnmarshalJSON(data []byte) error {
	ii := marshalBodyParameter(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"description",
			"name",
			"required",
			"schema",
			"in",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["in"]; !ok || string(v) != `"body"` {
		return fmt.Errorf(`bad or missing const value for "in" ("body" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = BodyParameter(ii)

	return err
}

var (
	// constBodyParameter is unconditionally added to JSON.
	constBodyParameter = json.RawMessage(`{"in":"body"}`)
)

// MarshalJSON encodes JSON.
func (i BodyParameter) MarshalJSON() ([]byte, error) {
	return marshalUnion(constBodyParameter, marshalBodyParameter(i), i.MapOfAnything)
}

// Schema structure is generated from "#/definitions/schema".
//
// A deterministic version of a JSON Schema object.
type Schema struct {
	Ref                  string                                        `json:"$ref,omitempty"`
	Format               string                                        `json:"format,omitempty"`
	Title                string                                        `json:"title,omitempty"`
	Description          string                                        `json:"description,omitempty"`
	Default              interface{}                                   `json:"default,omitempty"`
	MultipleOf           float64                                       `json:"multipleOf,omitempty"`
	Maximum              float64                                       `json:"maximum,omitempty"`
	ExclusiveMaximum     bool                                          `json:"exclusiveMaximum,omitempty"`
	Minimum              float64                                       `json:"minimum,omitempty"`
	ExclusiveMinimum     bool                                          `json:"exclusiveMinimum,omitempty"`
	MaxLength            int64                                         `json:"maxLength,omitempty"`
	MinLength            int64                                         `json:"minLength,omitempty"`
	Pattern              string                                        `json:"pattern,omitempty"`
	MaxItems             int64                                         `json:"maxItems,omitempty"`
	MinItems             int64                                         `json:"minItems,omitempty"`
	UniqueItems          bool                                          `json:"uniqueItems,omitempty"`
	MaxProperties        int64                                         `json:"maxProperties,omitempty"`
	MinProperties        int64                                         `json:"minProperties,omitempty"`
	Required             []string                                      `json:"required,omitempty"`
	Enum                 []interface{}                                 `json:"enum,omitempty"`
	MapOfAnything        map[string]interface{}                        `json:"-"`                              // Key must match pattern: ^x-
	AdditionalProperties *SchemaAdditionalProperties                   `json:"additionalProperties,omitempty"`
	Type                 *HTTPJSONSchemaOrgDraft04SchemaPropertiesType `json:"type,omitempty"`
	Items                *SchemaItems                                  `json:"items,omitempty"`
	AllOf                []Schema                                      `json:"allOf,omitempty"`
	Properties           map[string]Schema                             `json:"properties,omitempty"`
	Discriminator        string                                        `json:"discriminator,omitempty"`
	ReadOnly             bool                                          `json:"readOnly,omitempty"`
	XML                  *XML                                          `json:"xml,omitempty"`
	ExternalDocs         *ExternalDocs                                 `json:"externalDocs,omitempty"`         // information about external documentation
	Example              interface{}                                   `json:"example,omitempty"`
}

type marshalSchema Schema

// UnmarshalJSON decodes JSON.
func (i *Schema) UnmarshalJSON(data []byte) error {
	ii := marshalSchema(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"$ref",
			"format",
			"title",
			"description",
			"default",
			"multipleOf",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"maxProperties",
			"minProperties",
			"required",
			"enum",
			"additionalProperties",
			"type",
			"items",
			"allOf",
			"properties",
			"discriminator",
			"readOnly",
			"xml",
			"externalDocs",
			"example",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Schema(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Schema) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalSchema(i), i.MapOfAnything)
}

// SchemaAdditionalProperties structure is generated from "#/definitions/schema->additionalProperties".
type SchemaAdditionalProperties struct {
	Schema *Schema `json:"-"`
	Bool   *bool   `json:"-"`
}

type marshalSchemaAdditionalProperties SchemaAdditionalProperties

// UnmarshalJSON decodes JSON.
func (i *SchemaAdditionalProperties) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.Schema, &i.Bool}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.Schema = nil
	}

	if mayUnmarshal[1] == nil {
		i.Bool = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i SchemaAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalSchemaAdditionalProperties(i), i.Schema, i.Bool)
}

// HTTPJSONSchemaOrgDraft04SchemaPropertiesType structure is generated from "http://json-schema.org/draft-04/schema#/properties/type".
type HTTPJSONSchemaOrgDraft04SchemaPropertiesType struct {
	SimpleTypes              *SimpleTypes  `json:"-"`
	SliceOfSimpleTypesValues []SimpleTypes `json:"-"`
}

type marshalHTTPJSONSchemaOrgDraft04SchemaPropertiesType HTTPJSONSchemaOrgDraft04SchemaPropertiesType

// UnmarshalJSON decodes JSON.
func (i *HTTPJSONSchemaOrgDraft04SchemaPropertiesType) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.SimpleTypes, &i.SliceOfSimpleTypesValues}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.SimpleTypes = nil
	}

	if mayUnmarshal[1] == nil {
		i.SliceOfSimpleTypesValues = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i HTTPJSONSchemaOrgDraft04SchemaPropertiesType) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPJSONSchemaOrgDraft04SchemaPropertiesType(i), i.SimpleTypes, i.SliceOfSimpleTypesValues)
}

// SchemaItems structure is generated from "#/definitions/schema->items".
type SchemaItems struct {
	Schema              *Schema  `json:"-"`
	SliceOfSchemaValues []Schema `json:"-"`
}

type marshalSchemaItems SchemaItems

// UnmarshalJSON decodes JSON.
func (i *SchemaItems) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.Schema, &i.SliceOfSchemaValues}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.Schema = nil
	}

	if mayUnmarshal[1] == nil {
		i.SliceOfSchemaValues = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i SchemaItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalSchemaItems(i), i.Schema, i.SliceOfSchemaValues)
}

// XML structure is generated from "#/definitions/xml".
type XML struct {
	Name          string                 `json:"name,omitempty"`
	Namespace     string                 `json:"namespace,omitempty"`
	Prefix        string                 `json:"prefix,omitempty"`
	Attribute     bool                   `json:"attribute,omitempty"`
	Wrapped       bool                   `json:"wrapped,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                   // Key must match pattern: ^x-
}

type marshalXML XML

// UnmarshalJSON decodes JSON.
func (i *XML) UnmarshalJSON(data []byte) error {
	ii := marshalXML(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"name",
			"namespace",
			"prefix",
			"attribute",
			"wrapped",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = XML(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i XML) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalXML(i), i.MapOfAnything)
}

// HeaderParameterSubSchema structure is generated from "#/definitions/headerParameterSubSchema".
type HeaderParameterSubSchema struct {
	Required         bool                         `json:"required,omitempty"`         // Determines whether or not this parameter is required or optional.
	Description      string                       `json:"description,omitempty"`      // A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
	Name             string                       `json:"name,omitempty"`             // The name of the parameter.
	Type             HeaderParameterSubSchemaType `json:"type,omitempty"`
	Format           string                       `json:"format,omitempty"`
	Items            *PrimitivesItems             `json:"items,omitempty"`
	CollectionFormat CollectionFormat             `json:"collectionFormat,omitempty"`
	Default          interface{}                  `json:"default,omitempty"`
	Maximum          float64                      `json:"maximum,omitempty"`
	ExclusiveMaximum bool                         `json:"exclusiveMaximum,omitempty"`
	Minimum          float64                      `json:"minimum,omitempty"`
	ExclusiveMinimum bool                         `json:"exclusiveMinimum,omitempty"`
	MaxLength        int64                        `json:"maxLength,omitempty"`
	MinLength        int64                        `json:"minLength,omitempty"`
	Pattern          string                       `json:"pattern,omitempty"`
	MaxItems         int64                        `json:"maxItems,omitempty"`
	MinItems         int64                        `json:"minItems,omitempty"`
	UniqueItems      bool                         `json:"uniqueItems,omitempty"`
	Enum             []interface{}                `json:"enum,omitempty"`
	MultipleOf       float64                      `json:"multipleOf,omitempty"`
	MapOfAnything    map[string]interface{}       `json:"-"`                          // Key must match pattern: ^x-
}

type marshalHeaderParameterSubSchema HeaderParameterSubSchema

// UnmarshalJSON decodes JSON.
func (i *HeaderParameterSubSchema) UnmarshalJSON(data []byte) error {
	ii := marshalHeaderParameterSubSchema(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"required",
			"description",
			"name",
			"type",
			"format",
			"items",
			"collectionFormat",
			"default",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"enum",
			"multipleOf",
			"in",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["in"]; !ok || string(v) != `"header"` {
		return fmt.Errorf(`bad or missing const value for "in" ("header" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = HeaderParameterSubSchema(ii)

	return err
}

var (
	// constHeaderParameterSubSchema is unconditionally added to JSON.
	constHeaderParameterSubSchema = json.RawMessage(`{"in":"header"}`)
)

// MarshalJSON encodes JSON.
func (i HeaderParameterSubSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHeaderParameterSubSchema, marshalHeaderParameterSubSchema(i), i.MapOfAnything)
}

// PrimitivesItems structure is generated from "#/definitions/primitivesItems".
type PrimitivesItems struct {
	Type             PrimitivesItemsType    `json:"type,omitempty"`
	Format           string                 `json:"format,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"`                          // Key must match pattern: ^x-
	Items            *PrimitivesItems       `json:"items,omitempty"`
	CollectionFormat CollectionFormat       `json:"collectionFormat,omitempty"`
	Default          interface{}            `json:"default,omitempty"`
	Maximum          float64                `json:"maximum,omitempty"`
	ExclusiveMaximum bool                   `json:"exclusiveMaximum,omitempty"`
	Minimum          float64                `json:"minimum,omitempty"`
	ExclusiveMinimum bool                   `json:"exclusiveMinimum,omitempty"`
	MaxLength        int64                  `json:"maxLength,omitempty"`
	MinLength        int64                  `json:"minLength,omitempty"`
	Pattern          string                 `json:"pattern,omitempty"`
	MaxItems         int64                  `json:"maxItems,omitempty"`
	MinItems         int64                  `json:"minItems,omitempty"`
	UniqueItems      bool                   `json:"uniqueItems,omitempty"`
	Enum             []interface{}          `json:"enum,omitempty"`
	MultipleOf       float64                `json:"multipleOf,omitempty"`
}

type marshalPrimitivesItems PrimitivesItems

// UnmarshalJSON decodes JSON.
func (i *PrimitivesItems) UnmarshalJSON(data []byte) error {
	ii := marshalPrimitivesItems(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"type",
			"format",
			"items",
			"collectionFormat",
			"default",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"enum",
			"multipleOf",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = PrimitivesItems(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i PrimitivesItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalPrimitivesItems(i), i.MapOfAnything)
}

// FormDataParameterSubSchema structure is generated from "#/definitions/formDataParameterSubSchema".
type FormDataParameterSubSchema struct {
	Required         bool                           `json:"required,omitempty"`         // Determines whether or not this parameter is required or optional.
	Description      string                         `json:"description,omitempty"`      // A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
	Name             string                         `json:"name,omitempty"`             // The name of the parameter.
	AllowEmptyValue  bool                           `json:"allowEmptyValue,omitempty"`  // allows sending a parameter by name only or with an empty value.
	Type             FormDataParameterSubSchemaType `json:"type,omitempty"`
	Format           string                         `json:"format,omitempty"`
	Items            *PrimitivesItems               `json:"items,omitempty"`
	CollectionFormat CollectionFormatWithMulti      `json:"collectionFormat,omitempty"`
	Default          interface{}                    `json:"default,omitempty"`
	Maximum          float64                        `json:"maximum,omitempty"`
	ExclusiveMaximum bool                           `json:"exclusiveMaximum,omitempty"`
	Minimum          float64                        `json:"minimum,omitempty"`
	ExclusiveMinimum bool                           `json:"exclusiveMinimum,omitempty"`
	MaxLength        int64                          `json:"maxLength,omitempty"`
	MinLength        int64                          `json:"minLength,omitempty"`
	Pattern          string                         `json:"pattern,omitempty"`
	MaxItems         int64                          `json:"maxItems,omitempty"`
	MinItems         int64                          `json:"minItems,omitempty"`
	UniqueItems      bool                           `json:"uniqueItems,omitempty"`
	Enum             []interface{}                  `json:"enum,omitempty"`
	MultipleOf       float64                        `json:"multipleOf,omitempty"`
	MapOfAnything    map[string]interface{}         `json:"-"`                          // Key must match pattern: ^x-
}

type marshalFormDataParameterSubSchema FormDataParameterSubSchema

// UnmarshalJSON decodes JSON.
func (i *FormDataParameterSubSchema) UnmarshalJSON(data []byte) error {
	ii := marshalFormDataParameterSubSchema(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"required",
			"description",
			"name",
			"allowEmptyValue",
			"type",
			"format",
			"items",
			"collectionFormat",
			"default",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"enum",
			"multipleOf",
			"in",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["in"]; !ok || string(v) != `"formData"` {
		return fmt.Errorf(`bad or missing const value for "in" ("formData" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = FormDataParameterSubSchema(ii)

	return err
}

var (
	// constFormDataParameterSubSchema is unconditionally added to JSON.
	constFormDataParameterSubSchema = json.RawMessage(`{"in":"formData"}`)
)

// MarshalJSON encodes JSON.
func (i FormDataParameterSubSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(constFormDataParameterSubSchema, marshalFormDataParameterSubSchema(i), i.MapOfAnything)
}

// QueryParameterSubSchema structure is generated from "#/definitions/queryParameterSubSchema".
type QueryParameterSubSchema struct {
	Required         bool                        `json:"required,omitempty"`         // Determines whether or not this parameter is required or optional.
	Description      string                      `json:"description,omitempty"`      // A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
	Name             string                      `json:"name,omitempty"`             // The name of the parameter.
	AllowEmptyValue  bool                        `json:"allowEmptyValue,omitempty"`  // allows sending a parameter by name only or with an empty value.
	Type             QueryParameterSubSchemaType `json:"type,omitempty"`
	Format           string                      `json:"format,omitempty"`
	Items            *PrimitivesItems            `json:"items,omitempty"`
	CollectionFormat CollectionFormatWithMulti   `json:"collectionFormat,omitempty"`
	Default          interface{}                 `json:"default,omitempty"`
	Maximum          float64                     `json:"maximum,omitempty"`
	ExclusiveMaximum bool                        `json:"exclusiveMaximum,omitempty"`
	Minimum          float64                     `json:"minimum,omitempty"`
	ExclusiveMinimum bool                        `json:"exclusiveMinimum,omitempty"`
	MaxLength        int64                       `json:"maxLength,omitempty"`
	MinLength        int64                       `json:"minLength,omitempty"`
	Pattern          string                      `json:"pattern,omitempty"`
	MaxItems         int64                       `json:"maxItems,omitempty"`
	MinItems         int64                       `json:"minItems,omitempty"`
	UniqueItems      bool                        `json:"uniqueItems,omitempty"`
	Enum             []interface{}               `json:"enum,omitempty"`
	MultipleOf       float64                     `json:"multipleOf,omitempty"`
	MapOfAnything    map[string]interface{}      `json:"-"`                          // Key must match pattern: ^x-
}

type marshalQueryParameterSubSchema QueryParameterSubSchema

// UnmarshalJSON decodes JSON.
func (i *QueryParameterSubSchema) UnmarshalJSON(data []byte) error {
	ii := marshalQueryParameterSubSchema(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"required",
			"description",
			"name",
			"allowEmptyValue",
			"type",
			"format",
			"items",
			"collectionFormat",
			"default",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"enum",
			"multipleOf",
			"in",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["in"]; !ok || string(v) != `"query"` {
		return fmt.Errorf(`bad or missing const value for "in" ("query" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = QueryParameterSubSchema(ii)

	return err
}

var (
	// constQueryParameterSubSchema is unconditionally added to JSON.
	constQueryParameterSubSchema = json.RawMessage(`{"in":"query"}`)
)

// MarshalJSON encodes JSON.
func (i QueryParameterSubSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(constQueryParameterSubSchema, marshalQueryParameterSubSchema(i), i.MapOfAnything)
}

// PathParameterSubSchema structure is generated from "#/definitions/pathParameterSubSchema".
type PathParameterSubSchema struct {
	Description      string                     `json:"description,omitempty"`      // A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
	Name             string                     `json:"name,omitempty"`             // The name of the parameter.
	Type             PathParameterSubSchemaType `json:"type,omitempty"`
	Format           string                     `json:"format,omitempty"`
	Items            *PrimitivesItems           `json:"items,omitempty"`
	CollectionFormat CollectionFormat           `json:"collectionFormat,omitempty"`
	Default          interface{}                `json:"default,omitempty"`
	Maximum          float64                    `json:"maximum,omitempty"`
	ExclusiveMaximum bool                       `json:"exclusiveMaximum,omitempty"`
	Minimum          float64                    `json:"minimum,omitempty"`
	ExclusiveMinimum bool                       `json:"exclusiveMinimum,omitempty"`
	MaxLength        int64                      `json:"maxLength,omitempty"`
	MinLength        int64                      `json:"minLength,omitempty"`
	Pattern          string                     `json:"pattern,omitempty"`
	MaxItems         int64                      `json:"maxItems,omitempty"`
	MinItems         int64                      `json:"minItems,omitempty"`
	UniqueItems      bool                       `json:"uniqueItems,omitempty"`
	Enum             []interface{}              `json:"enum,omitempty"`
	MultipleOf       float64                    `json:"multipleOf,omitempty"`
	MapOfAnything    map[string]interface{}     `json:"-"`                          // Key must match pattern: ^x-
}

type marshalPathParameterSubSchema PathParameterSubSchema

// UnmarshalJSON decodes JSON.
func (i *PathParameterSubSchema) UnmarshalJSON(data []byte) error {
	ii := marshalPathParameterSubSchema(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"description",
			"name",
			"type",
			"format",
			"items",
			"collectionFormat",
			"default",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"enum",
			"multipleOf",
			"required",
			"in",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["required"]; !ok || string(v) != "true" {
		return fmt.Errorf(`bad or missing const value for "required" (true expected, %v received)`, v)
	}

	if v, ok := constValues["in"]; !ok || string(v) != `"path"` {
		return fmt.Errorf(`bad or missing const value for "in" ("path" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = PathParameterSubSchema(ii)

	return err
}

var (
	// constPathParameterSubSchema is unconditionally added to JSON.
	constPathParameterSubSchema = json.RawMessage(`{"required":true,"in":"path"}`)
)

// MarshalJSON encodes JSON.
func (i PathParameterSubSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(constPathParameterSubSchema, marshalPathParameterSubSchema(i), i.MapOfAnything)
}

// NonBodyParameter structure is generated from "#/definitions/nonBodyParameter".
type NonBodyParameter struct {
	HeaderParameterSubSchema   *HeaderParameterSubSchema   `json:"-"`
	FormDataParameterSubSchema *FormDataParameterSubSchema `json:"-"`
	QueryParameterSubSchema    *QueryParameterSubSchema    `json:"-"`
	PathParameterSubSchema     *PathParameterSubSchema     `json:"-"`
}

type marshalNonBodyParameter NonBodyParameter

// UnmarshalJSON decodes JSON.
func (i *NonBodyParameter) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.HeaderParameterSubSchema, &i.FormDataParameterSubSchema, &i.QueryParameterSubSchema, &i.PathParameterSubSchema}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.HeaderParameterSubSchema = nil
	}

	if mayUnmarshal[1] == nil {
		i.FormDataParameterSubSchema = nil
	}

	if mayUnmarshal[2] == nil {
		i.QueryParameterSubSchema = nil
	}

	if mayUnmarshal[3] == nil {
		i.PathParameterSubSchema = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i NonBodyParameter) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalNonBodyParameter(i), i.HeaderParameterSubSchema, i.FormDataParameterSubSchema, i.QueryParameterSubSchema, i.PathParameterSubSchema)
}

// Parameter structure is generated from "#/definitions/parameter".
type Parameter struct {
	BodyParameter    *BodyParameter    `json:"-"`
	NonBodyParameter *NonBodyParameter `json:"-"`
}

type marshalParameter Parameter

// UnmarshalJSON decodes JSON.
func (i *Parameter) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.BodyParameter, &i.NonBodyParameter}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.BodyParameter = nil
	}

	if mayUnmarshal[1] == nil {
		i.NonBodyParameter = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i Parameter) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalParameter(i), i.BodyParameter, i.NonBodyParameter)
}

// JSONReference structure is generated from "#/definitions/jsonReference".
type JSONReference struct {
	Ref string `json:"$ref,omitempty"`
}

// ParametersListItems structure is generated from "#/definitions/parametersList->items".
type ParametersListItems struct {
	Parameter     *Parameter     `json:"-"`
	JSONReference *JSONReference `json:"-"`
}

type marshalParametersListItems ParametersListItems

// UnmarshalJSON decodes JSON.
func (i *ParametersListItems) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.Parameter, &i.JSONReference}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.Parameter = nil
	}

	if mayUnmarshal[1] == nil {
		i.JSONReference = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i ParametersListItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalParametersListItems(i), i.Parameter, i.JSONReference)
}

// Response structure is generated from "#/definitions/response".
type Response struct {
	Description   string                 `json:"description,omitempty"`
	Schema        *ResponseSchema        `json:"schema,omitempty"`
	Headers       map[string]Header      `json:"headers,omitempty"`
	Examples      map[string]interface{} `json:"examples,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalResponse Response

// UnmarshalJSON decodes JSON.
func (i *Response) UnmarshalJSON(data []byte) error {
	ii := marshalResponse(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"description",
			"schema",
			"headers",
			"examples",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Response(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Response) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalResponse(i), i.MapOfAnything)
}

// FileSchema structure is generated from "#/definitions/fileSchema".
//
// A deterministic version of a JSON Schema object.
type FileSchema struct {
	Format        string                 `json:"format,omitempty"`
	Title         string                 `json:"title,omitempty"`
	Description   string                 `json:"description,omitempty"`
	Default       interface{}            `json:"default,omitempty"`
	Required      []string               `json:"required,omitempty"`
	ReadOnly      bool                   `json:"readOnly,omitempty"`
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // information about external documentation
	Example       interface{}            `json:"example,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                      // Key must match pattern: ^x-
}

type marshalFileSchema FileSchema

// UnmarshalJSON decodes JSON.
func (i *FileSchema) UnmarshalJSON(data []byte) error {
	ii := marshalFileSchema(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"format",
			"title",
			"description",
			"default",
			"required",
			"readOnly",
			"externalDocs",
			"example",
			"type",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"file"` {
		return fmt.Errorf(`bad or missing const value for "type" ("file" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = FileSchema(ii)

	return err
}

var (
	// constFileSchema is unconditionally added to JSON.
	constFileSchema = json.RawMessage(`{"type":"file"}`)
)

// MarshalJSON encodes JSON.
func (i FileSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(constFileSchema, marshalFileSchema(i), i.MapOfAnything)
}

// ResponseSchema structure is generated from "#/definitions/response->schema".
type ResponseSchema struct {
	Schema     *Schema     `json:"-"`
	FileSchema *FileSchema `json:"-"`
}

type marshalResponseSchema ResponseSchema

// UnmarshalJSON decodes JSON.
func (i *ResponseSchema) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.Schema, &i.FileSchema}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.Schema = nil
	}

	if mayUnmarshal[1] == nil {
		i.FileSchema = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i ResponseSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalResponseSchema(i), i.Schema, i.FileSchema)
}

// Header structure is generated from "#/definitions/header".
type Header struct {
	Type             HeaderType             `json:"type,omitempty"`
	Format           string                 `json:"format,omitempty"`
	Items            *PrimitivesItems       `json:"items,omitempty"`
	CollectionFormat CollectionFormat       `json:"collectionFormat,omitempty"`
	Default          interface{}            `json:"default,omitempty"`
	Maximum          float64                `json:"maximum,omitempty"`
	ExclusiveMaximum bool                   `json:"exclusiveMaximum,omitempty"`
	Minimum          float64                `json:"minimum,omitempty"`
	ExclusiveMinimum bool                   `json:"exclusiveMinimum,omitempty"`
	MaxLength        int64                  `json:"maxLength,omitempty"`
	MinLength        int64                  `json:"minLength,omitempty"`
	Pattern          string                 `json:"pattern,omitempty"`
	MaxItems         int64                  `json:"maxItems,omitempty"`
	MinItems         int64                  `json:"minItems,omitempty"`
	UniqueItems      bool                   `json:"uniqueItems,omitempty"`
	Enum             []interface{}          `json:"enum,omitempty"`
	MultipleOf       float64                `json:"multipleOf,omitempty"`
	Description      string                 `json:"description,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"`                          // Key must match pattern: ^x-
}

type marshalHeader Header

// UnmarshalJSON decodes JSON.
func (i *Header) UnmarshalJSON(data []byte) error {
	ii := marshalHeader(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"type",
			"format",
			"items",
			"collectionFormat",
			"default",
			"maximum",
			"exclusiveMaximum",
			"minimum",
			"exclusiveMinimum",
			"maxLength",
			"minLength",
			"pattern",
			"maxItems",
			"minItems",
			"uniqueItems",
			"enum",
			"multipleOf",
			"description",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Header(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Header) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHeader(i), i.MapOfAnything)
}

// ResponseValue structure is generated from "#/definitions/responseValue".
type ResponseValue struct {
	Response      *Response      `json:"-"`
	JSONReference *JSONReference `json:"-"`
}

type marshalResponseValue ResponseValue

// UnmarshalJSON decodes JSON.
func (i *ResponseValue) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.Response, &i.JSONReference}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.Response = nil
	}

	if mayUnmarshal[1] == nil {
		i.JSONReference = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i ResponseValue) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalResponseValue(i), i.Response, i.JSONReference)
}

// Responses structure is generated from "#/definitions/responses".
//
// Response objects names can either be any valid HTTP status code or 'default'.
type Responses struct {
	MapOfResponseValueValues map[string]ResponseValue `json:"-"` // Key must match pattern: ^([0-9]{3})$|^(default)$
	MapOfAnything            map[string]interface{}   `json:"-"` // Key must match pattern: ^x-
}

type marshalResponses Responses

// UnmarshalJSON decodes JSON.
func (i *Responses) UnmarshalJSON(data []byte) error {

	err := unionMap{
		patternProperties: map[*regexp.Regexp]interface{}{
			regex093Default: &i.MapOfResponseValueValues, // ^([0-9]{3})$|^(default)$
			regexX: &i.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()


	return err
}

// MarshalJSON encodes JSON.
func (i Responses) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalResponses(i), i.MapOfResponseValueValues, i.MapOfAnything)
}

// BasicAuthenticationSecurity structure is generated from "#/definitions/basicAuthenticationSecurity".
type BasicAuthenticationSecurity struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalBasicAuthenticationSecurity BasicAuthenticationSecurity

// UnmarshalJSON decodes JSON.
func (i *BasicAuthenticationSecurity) UnmarshalJSON(data []byte) error {
	ii := marshalBasicAuthenticationSecurity(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"description",
			"type",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"basic"` {
		return fmt.Errorf(`bad or missing const value for "type" ("basic" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = BasicAuthenticationSecurity(ii)

	return err
}

var (
	// constBasicAuthenticationSecurity is unconditionally added to JSON.
	constBasicAuthenticationSecurity = json.RawMessage(`{"type":"basic"}`)
)

// MarshalJSON encodes JSON.
func (i BasicAuthenticationSecurity) MarshalJSON() ([]byte, error) {
	return marshalUnion(constBasicAuthenticationSecurity, marshalBasicAuthenticationSecurity(i), i.MapOfAnything)
}

// APIKeySecurity structure is generated from "#/definitions/apiKeySecurity".
type APIKeySecurity struct {
	Name          string                 `json:"name,omitempty"`
	In            APIKeySecurityIn       `json:"in,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalAPIKeySecurity APIKeySecurity

// UnmarshalJSON decodes JSON.
func (i *APIKeySecurity) UnmarshalJSON(data []byte) error {
	ii := marshalAPIKeySecurity(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"name",
			"in",
			"description",
			"type",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"apiKey"` {
		return fmt.Errorf(`bad or missing const value for "type" ("apiKey" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = APIKeySecurity(ii)

	return err
}

var (
	// constAPIKeySecurity is unconditionally added to JSON.
	constAPIKeySecurity = json.RawMessage(`{"type":"apiKey"}`)
)

// MarshalJSON encodes JSON.
func (i APIKeySecurity) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAPIKeySecurity, marshalAPIKeySecurity(i), i.MapOfAnything)
}

// Oauth2ImplicitSecurity structure is generated from "#/definitions/oauth2ImplicitSecurity".
type Oauth2ImplicitSecurity struct {
	Scopes           map[string]string      `json:"scopes,omitempty"`
	AuthorizationURL string                 `json:"authorizationUrl,omitempty"`
	Description      string                 `json:"description,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"`                          // Key must match pattern: ^x-
}

type marshalOauth2ImplicitSecurity Oauth2ImplicitSecurity

// UnmarshalJSON decodes JSON.
func (i *Oauth2ImplicitSecurity) UnmarshalJSON(data []byte) error {
	ii := marshalOauth2ImplicitSecurity(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"scopes",
			"authorizationUrl",
			"description",
			"type",
			"flow",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"oauth2"` {
		return fmt.Errorf(`bad or missing const value for "type" ("oauth2" expected, %v received)`, v)
	}

	if v, ok := constValues["flow"]; !ok || string(v) != `"implicit"` {
		return fmt.Errorf(`bad or missing const value for "flow" ("implicit" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = Oauth2ImplicitSecurity(ii)

	return err
}

var (
	// constOauth2ImplicitSecurity is unconditionally added to JSON.
	constOauth2ImplicitSecurity = json.RawMessage(`{"type":"oauth2","flow":"implicit"}`)
)

// MarshalJSON encodes JSON.
func (i Oauth2ImplicitSecurity) MarshalJSON() ([]byte, error) {
	return marshalUnion(constOauth2ImplicitSecurity, marshalOauth2ImplicitSecurity(i), i.MapOfAnything)
}

// Oauth2PasswordSecurity structure is generated from "#/definitions/oauth2PasswordSecurity".
type Oauth2PasswordSecurity struct {
	Scopes        map[string]string      `json:"scopes,omitempty"`
	TokenURL      string                 `json:"tokenUrl,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalOauth2PasswordSecurity Oauth2PasswordSecurity

// UnmarshalJSON decodes JSON.
func (i *Oauth2PasswordSecurity) UnmarshalJSON(data []byte) error {
	ii := marshalOauth2PasswordSecurity(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"scopes",
			"tokenUrl",
			"description",
			"type",
			"flow",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"oauth2"` {
		return fmt.Errorf(`bad or missing const value for "type" ("oauth2" expected, %v received)`, v)
	}

	if v, ok := constValues["flow"]; !ok || string(v) != `"password"` {
		return fmt.Errorf(`bad or missing const value for "flow" ("password" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = Oauth2PasswordSecurity(ii)

	return err
}

var (
	// constOauth2PasswordSecurity is unconditionally added to JSON.
	constOauth2PasswordSecurity = json.RawMessage(`{"type":"oauth2","flow":"password"}`)
)

// MarshalJSON encodes JSON.
func (i Oauth2PasswordSecurity) MarshalJSON() ([]byte, error) {
	return marshalUnion(constOauth2PasswordSecurity, marshalOauth2PasswordSecurity(i), i.MapOfAnything)
}

// Oauth2ApplicationSecurity structure is generated from "#/definitions/oauth2ApplicationSecurity".
type Oauth2ApplicationSecurity struct {
	Scopes        map[string]string      `json:"scopes,omitempty"`
	TokenURL      string                 `json:"tokenUrl,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-
}

type marshalOauth2ApplicationSecurity Oauth2ApplicationSecurity

// UnmarshalJSON decodes JSON.
func (i *Oauth2ApplicationSecurity) UnmarshalJSON(data []byte) error {
	ii := marshalOauth2ApplicationSecurity(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"scopes",
			"tokenUrl",
			"description",
			"type",
			"flow",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"oauth2"` {
		return fmt.Errorf(`bad or missing const value for "type" ("oauth2" expected, %v received)`, v)
	}

	if v, ok := constValues["flow"]; !ok || string(v) != `"application"` {
		return fmt.Errorf(`bad or missing const value for "flow" ("application" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = Oauth2ApplicationSecurity(ii)

	return err
}

var (
	// constOauth2ApplicationSecurity is unconditionally added to JSON.
	constOauth2ApplicationSecurity = json.RawMessage(`{"type":"oauth2","flow":"application"}`)
)

// MarshalJSON encodes JSON.
func (i Oauth2ApplicationSecurity) MarshalJSON() ([]byte, error) {
	return marshalUnion(constOauth2ApplicationSecurity, marshalOauth2ApplicationSecurity(i), i.MapOfAnything)
}

// Oauth2AccessCodeSecurity structure is generated from "#/definitions/oauth2AccessCodeSecurity".
type Oauth2AccessCodeSecurity struct {
	Scopes           map[string]string      `json:"scopes,omitempty"`
	AuthorizationURL string                 `json:"authorizationUrl,omitempty"`
	TokenURL         string                 `json:"tokenUrl,omitempty"`
	Description      string                 `json:"description,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"`                          // Key must match pattern: ^x-
}

type marshalOauth2AccessCodeSecurity Oauth2AccessCodeSecurity

// UnmarshalJSON decodes JSON.
func (i *Oauth2AccessCodeSecurity) UnmarshalJSON(data []byte) error {
	ii := marshalOauth2AccessCodeSecurity(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		mayUnmarshal: mayUnmarshal,
		ignoreKeys: []string{
			"scopes",
			"authorizationUrl",
			"tokenUrl",
			"description",
			"type",
			"flow",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if v, ok := constValues["type"]; !ok || string(v) != `"oauth2"` {
		return fmt.Errorf(`bad or missing const value for "type" ("oauth2" expected, %v received)`, v)
	}

	if v, ok := constValues["flow"]; !ok || string(v) != `"accessCode"` {
		return fmt.Errorf(`bad or missing const value for "flow" ("accessCode" expected, %v received)`, v)
	}

	if err != nil {
		return err
	}

	*i = Oauth2AccessCodeSecurity(ii)

	return err
}

var (
	// constOauth2AccessCodeSecurity is unconditionally added to JSON.
	constOauth2AccessCodeSecurity = json.RawMessage(`{"type":"oauth2","flow":"accessCode"}`)
)

// MarshalJSON encodes JSON.
func (i Oauth2AccessCodeSecurity) MarshalJSON() ([]byte, error) {
	return marshalUnion(constOauth2AccessCodeSecurity, marshalOauth2AccessCodeSecurity(i), i.MapOfAnything)
}

// SecurityDefinitionsAdditionalProperties structure is generated from "#/definitions/securityDefinitions->additionalProperties".
type SecurityDefinitionsAdditionalProperties struct {
	BasicAuthenticationSecurity *BasicAuthenticationSecurity `json:"-"`
	APIKeySecurity              *APIKeySecurity              `json:"-"`
	Oauth2ImplicitSecurity      *Oauth2ImplicitSecurity      `json:"-"`
	Oauth2PasswordSecurity      *Oauth2PasswordSecurity      `json:"-"`
	Oauth2ApplicationSecurity   *Oauth2ApplicationSecurity   `json:"-"`
	Oauth2AccessCodeSecurity    *Oauth2AccessCodeSecurity    `json:"-"`
}

type marshalSecurityDefinitionsAdditionalProperties SecurityDefinitionsAdditionalProperties

// UnmarshalJSON decodes JSON.
func (i *SecurityDefinitionsAdditionalProperties) UnmarshalJSON(data []byte) error {
	mayUnmarshal := []interface{}{&i.BasicAuthenticationSecurity, &i.APIKeySecurity, &i.Oauth2ImplicitSecurity, &i.Oauth2PasswordSecurity, &i.Oauth2ApplicationSecurity, &i.Oauth2AccessCodeSecurity}
	err := unionMap{
		mayUnmarshal: mayUnmarshal,
		jsonData: data,
	}.unmarshal()

	if mayUnmarshal[0] == nil {
		i.BasicAuthenticationSecurity = nil
	}

	if mayUnmarshal[1] == nil {
		i.APIKeySecurity = nil
	}

	if mayUnmarshal[2] == nil {
		i.Oauth2ImplicitSecurity = nil
	}

	if mayUnmarshal[3] == nil {
		i.Oauth2PasswordSecurity = nil
	}

	if mayUnmarshal[4] == nil {
		i.Oauth2ApplicationSecurity = nil
	}

	if mayUnmarshal[5] == nil {
		i.Oauth2AccessCodeSecurity = nil
	}

	
	return err
}

// MarshalJSON encodes JSON.
func (i SecurityDefinitionsAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalSecurityDefinitionsAdditionalProperties(i), i.BasicAuthenticationSecurity, i.APIKeySecurity, i.Oauth2ImplicitSecurity, i.Oauth2PasswordSecurity, i.Oauth2ApplicationSecurity, i.Oauth2AccessCodeSecurity)
}

// Tag structure is generated from "#/definitions/tag".
type Tag struct {
	Name          string                 `json:"name,omitempty"`
	Description   string                 `json:"description,omitempty"`
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // information about external documentation
	MapOfAnything map[string]interface{} `json:"-"`                      // Key must match pattern: ^x-
}

type marshalTag Tag

// UnmarshalJSON decodes JSON.
func (i *Tag) UnmarshalJSON(data []byte) error {
	ii := marshalTag(*i)

	err := unionMap{
		mustUnmarshal: []interface{}{&ii},
		ignoreKeys: []string{
			"name",
			"description",
			"externalDocs",
		},
		patternProperties: map[*regexp.Regexp]interface{}{
			regexX: &ii.MapOfAnything, // ^x-
		},
		jsonData: data,
	}.unmarshal()

	if err != nil {
		return err
	}

	*i = Tag(ii)

	return err
}

// MarshalJSON encodes JSON.
func (i Tag) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalTag(i), i.MapOfAnything)
}

// SchemesListItems is an enum type.
type SchemesListItems string

// SchemesListItems values enumeration.
const (
	SchemesListItemsHTTP = SchemesListItems("http")
	SchemesListItemsHTTPS = SchemesListItems("https")
	SchemesListItemsWs = SchemesListItems("ws")
	SchemesListItemsWss = SchemesListItems("wss")
)

// MarshalJSON encodes JSON.
func (i SchemesListItems) MarshalJSON() ([]byte, error) {
	switch i {
	case SchemesListItemsHTTP:
	case SchemesListItemsHTTPS:
	case SchemesListItemsWs:
	case SchemesListItemsWss:

	default:
		return nil, fmt.Errorf("unexpected SchemesListItems value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *SchemesListItems) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := SchemesListItems(ii)

	switch v {
	case SchemesListItemsHTTP:
	case SchemesListItemsHTTPS:
	case SchemesListItemsWs:
	case SchemesListItemsWss:

	default:
		return fmt.Errorf("unexpected SchemesListItems value: %v", v)
	}

	*i = v

	return nil
}

// SimpleTypes is an enum type.
type SimpleTypes string

// SimpleTypes values enumeration.
const (
	SimpleTypesArray = SimpleTypes("array")
	SimpleTypesBoolean = SimpleTypes("boolean")
	SimpleTypesInteger = SimpleTypes("integer")
	SimpleTypesNull = SimpleTypes("null")
	SimpleTypesNumber = SimpleTypes("number")
	SimpleTypesObject = SimpleTypes("object")
	SimpleTypesString = SimpleTypes("string")
)

// MarshalJSON encodes JSON.
func (i SimpleTypes) MarshalJSON() ([]byte, error) {
	switch i {
	case SimpleTypesArray:
	case SimpleTypesBoolean:
	case SimpleTypesInteger:
	case SimpleTypesNull:
	case SimpleTypesNumber:
	case SimpleTypesObject:
	case SimpleTypesString:

	default:
		return nil, fmt.Errorf("unexpected SimpleTypes value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *SimpleTypes) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := SimpleTypes(ii)

	switch v {
	case SimpleTypesArray:
	case SimpleTypesBoolean:
	case SimpleTypesInteger:
	case SimpleTypesNull:
	case SimpleTypesNumber:
	case SimpleTypesObject:
	case SimpleTypesString:

	default:
		return fmt.Errorf("unexpected SimpleTypes value: %v", v)
	}

	*i = v

	return nil
}

// HeaderParameterSubSchemaType is an enum type.
type HeaderParameterSubSchemaType string

// HeaderParameterSubSchemaType values enumeration.
const (
	HeaderParameterSubSchemaTypeString = HeaderParameterSubSchemaType("string")
	HeaderParameterSubSchemaTypeNumber = HeaderParameterSubSchemaType("number")
	HeaderParameterSubSchemaTypeBoolean = HeaderParameterSubSchemaType("boolean")
	HeaderParameterSubSchemaTypeInteger = HeaderParameterSubSchemaType("integer")
	HeaderParameterSubSchemaTypeArray = HeaderParameterSubSchemaType("array")
)

// MarshalJSON encodes JSON.
func (i HeaderParameterSubSchemaType) MarshalJSON() ([]byte, error) {
	switch i {
	case HeaderParameterSubSchemaTypeString:
	case HeaderParameterSubSchemaTypeNumber:
	case HeaderParameterSubSchemaTypeBoolean:
	case HeaderParameterSubSchemaTypeInteger:
	case HeaderParameterSubSchemaTypeArray:

	default:
		return nil, fmt.Errorf("unexpected HeaderParameterSubSchemaType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HeaderParameterSubSchemaType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HeaderParameterSubSchemaType(ii)

	switch v {
	case HeaderParameterSubSchemaTypeString:
	case HeaderParameterSubSchemaTypeNumber:
	case HeaderParameterSubSchemaTypeBoolean:
	case HeaderParameterSubSchemaTypeInteger:
	case HeaderParameterSubSchemaTypeArray:

	default:
		return fmt.Errorf("unexpected HeaderParameterSubSchemaType value: %v", v)
	}

	*i = v

	return nil
}

// PrimitivesItemsType is an enum type.
type PrimitivesItemsType string

// PrimitivesItemsType values enumeration.
const (
	PrimitivesItemsTypeString = PrimitivesItemsType("string")
	PrimitivesItemsTypeNumber = PrimitivesItemsType("number")
	PrimitivesItemsTypeInteger = PrimitivesItemsType("integer")
	PrimitivesItemsTypeBoolean = PrimitivesItemsType("boolean")
	PrimitivesItemsTypeArray = PrimitivesItemsType("array")
)

// MarshalJSON encodes JSON.
func (i PrimitivesItemsType) MarshalJSON() ([]byte, error) {
	switch i {
	case PrimitivesItemsTypeString:
	case PrimitivesItemsTypeNumber:
	case PrimitivesItemsTypeInteger:
	case PrimitivesItemsTypeBoolean:
	case PrimitivesItemsTypeArray:

	default:
		return nil, fmt.Errorf("unexpected PrimitivesItemsType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PrimitivesItemsType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PrimitivesItemsType(ii)

	switch v {
	case PrimitivesItemsTypeString:
	case PrimitivesItemsTypeNumber:
	case PrimitivesItemsTypeInteger:
	case PrimitivesItemsTypeBoolean:
	case PrimitivesItemsTypeArray:

	default:
		return fmt.Errorf("unexpected PrimitivesItemsType value: %v", v)
	}

	*i = v

	return nil
}

// CollectionFormat is an enum type.
type CollectionFormat string

// CollectionFormat values enumeration.
const (
	CollectionFormatCsv = CollectionFormat("csv")
	CollectionFormatSsv = CollectionFormat("ssv")
	CollectionFormatTsv = CollectionFormat("tsv")
	CollectionFormatPipes = CollectionFormat("pipes")
)

// MarshalJSON encodes JSON.
func (i CollectionFormat) MarshalJSON() ([]byte, error) {
	switch i {
	case CollectionFormatCsv:
	case CollectionFormatSsv:
	case CollectionFormatTsv:
	case CollectionFormatPipes:

	default:
		return nil, fmt.Errorf("unexpected CollectionFormat value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CollectionFormat) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CollectionFormat(ii)

	switch v {
	case CollectionFormatCsv:
	case CollectionFormatSsv:
	case CollectionFormatTsv:
	case CollectionFormatPipes:

	default:
		return fmt.Errorf("unexpected CollectionFormat value: %v", v)
	}

	*i = v

	return nil
}

// FormDataParameterSubSchemaType is an enum type.
type FormDataParameterSubSchemaType string

// FormDataParameterSubSchemaType values enumeration.
const (
	FormDataParameterSubSchemaTypeString = FormDataParameterSubSchemaType("string")
	FormDataParameterSubSchemaTypeNumber = FormDataParameterSubSchemaType("number")
	FormDataParameterSubSchemaTypeBoolean = FormDataParameterSubSchemaType("boolean")
	FormDataParameterSubSchemaTypeInteger = FormDataParameterSubSchemaType("integer")
	FormDataParameterSubSchemaTypeArray = FormDataParameterSubSchemaType("array")
	FormDataParameterSubSchemaTypeFile = FormDataParameterSubSchemaType("file")
)

// MarshalJSON encodes JSON.
func (i FormDataParameterSubSchemaType) MarshalJSON() ([]byte, error) {
	switch i {
	case FormDataParameterSubSchemaTypeString:
	case FormDataParameterSubSchemaTypeNumber:
	case FormDataParameterSubSchemaTypeBoolean:
	case FormDataParameterSubSchemaTypeInteger:
	case FormDataParameterSubSchemaTypeArray:
	case FormDataParameterSubSchemaTypeFile:

	default:
		return nil, fmt.Errorf("unexpected FormDataParameterSubSchemaType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *FormDataParameterSubSchemaType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := FormDataParameterSubSchemaType(ii)

	switch v {
	case FormDataParameterSubSchemaTypeString:
	case FormDataParameterSubSchemaTypeNumber:
	case FormDataParameterSubSchemaTypeBoolean:
	case FormDataParameterSubSchemaTypeInteger:
	case FormDataParameterSubSchemaTypeArray:
	case FormDataParameterSubSchemaTypeFile:

	default:
		return fmt.Errorf("unexpected FormDataParameterSubSchemaType value: %v", v)
	}

	*i = v

	return nil
}

// CollectionFormatWithMulti is an enum type.
type CollectionFormatWithMulti string

// CollectionFormatWithMulti values enumeration.
const (
	CollectionFormatWithMultiCsv = CollectionFormatWithMulti("csv")
	CollectionFormatWithMultiSsv = CollectionFormatWithMulti("ssv")
	CollectionFormatWithMultiTsv = CollectionFormatWithMulti("tsv")
	CollectionFormatWithMultiPipes = CollectionFormatWithMulti("pipes")
	CollectionFormatWithMultiMulti = CollectionFormatWithMulti("multi")
)

// MarshalJSON encodes JSON.
func (i CollectionFormatWithMulti) MarshalJSON() ([]byte, error) {
	switch i {
	case CollectionFormatWithMultiCsv:
	case CollectionFormatWithMultiSsv:
	case CollectionFormatWithMultiTsv:
	case CollectionFormatWithMultiPipes:
	case CollectionFormatWithMultiMulti:

	default:
		return nil, fmt.Errorf("unexpected CollectionFormatWithMulti value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *CollectionFormatWithMulti) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := CollectionFormatWithMulti(ii)

	switch v {
	case CollectionFormatWithMultiCsv:
	case CollectionFormatWithMultiSsv:
	case CollectionFormatWithMultiTsv:
	case CollectionFormatWithMultiPipes:
	case CollectionFormatWithMultiMulti:

	default:
		return fmt.Errorf("unexpected CollectionFormatWithMulti value: %v", v)
	}

	*i = v

	return nil
}

// QueryParameterSubSchemaType is an enum type.
type QueryParameterSubSchemaType string

// QueryParameterSubSchemaType values enumeration.
const (
	QueryParameterSubSchemaTypeString = QueryParameterSubSchemaType("string")
	QueryParameterSubSchemaTypeNumber = QueryParameterSubSchemaType("number")
	QueryParameterSubSchemaTypeBoolean = QueryParameterSubSchemaType("boolean")
	QueryParameterSubSchemaTypeInteger = QueryParameterSubSchemaType("integer")
	QueryParameterSubSchemaTypeArray = QueryParameterSubSchemaType("array")
)

// MarshalJSON encodes JSON.
func (i QueryParameterSubSchemaType) MarshalJSON() ([]byte, error) {
	switch i {
	case QueryParameterSubSchemaTypeString:
	case QueryParameterSubSchemaTypeNumber:
	case QueryParameterSubSchemaTypeBoolean:
	case QueryParameterSubSchemaTypeInteger:
	case QueryParameterSubSchemaTypeArray:

	default:
		return nil, fmt.Errorf("unexpected QueryParameterSubSchemaType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *QueryParameterSubSchemaType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := QueryParameterSubSchemaType(ii)

	switch v {
	case QueryParameterSubSchemaTypeString:
	case QueryParameterSubSchemaTypeNumber:
	case QueryParameterSubSchemaTypeBoolean:
	case QueryParameterSubSchemaTypeInteger:
	case QueryParameterSubSchemaTypeArray:

	default:
		return fmt.Errorf("unexpected QueryParameterSubSchemaType value: %v", v)
	}

	*i = v

	return nil
}

// PathParameterSubSchemaType is an enum type.
type PathParameterSubSchemaType string

// PathParameterSubSchemaType values enumeration.
const (
	PathParameterSubSchemaTypeString = PathParameterSubSchemaType("string")
	PathParameterSubSchemaTypeNumber = PathParameterSubSchemaType("number")
	PathParameterSubSchemaTypeBoolean = PathParameterSubSchemaType("boolean")
	PathParameterSubSchemaTypeInteger = PathParameterSubSchemaType("integer")
	PathParameterSubSchemaTypeArray = PathParameterSubSchemaType("array")
)

// MarshalJSON encodes JSON.
func (i PathParameterSubSchemaType) MarshalJSON() ([]byte, error) {
	switch i {
	case PathParameterSubSchemaTypeString:
	case PathParameterSubSchemaTypeNumber:
	case PathParameterSubSchemaTypeBoolean:
	case PathParameterSubSchemaTypeInteger:
	case PathParameterSubSchemaTypeArray:

	default:
		return nil, fmt.Errorf("unexpected PathParameterSubSchemaType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *PathParameterSubSchemaType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := PathParameterSubSchemaType(ii)

	switch v {
	case PathParameterSubSchemaTypeString:
	case PathParameterSubSchemaTypeNumber:
	case PathParameterSubSchemaTypeBoolean:
	case PathParameterSubSchemaTypeInteger:
	case PathParameterSubSchemaTypeArray:

	default:
		return fmt.Errorf("unexpected PathParameterSubSchemaType value: %v", v)
	}

	*i = v

	return nil
}

// HeaderType is an enum type.
type HeaderType string

// HeaderType values enumeration.
const (
	HeaderTypeString = HeaderType("string")
	HeaderTypeNumber = HeaderType("number")
	HeaderTypeInteger = HeaderType("integer")
	HeaderTypeBoolean = HeaderType("boolean")
	HeaderTypeArray = HeaderType("array")
)

// MarshalJSON encodes JSON.
func (i HeaderType) MarshalJSON() ([]byte, error) {
	switch i {
	case HeaderTypeString:
	case HeaderTypeNumber:
	case HeaderTypeInteger:
	case HeaderTypeBoolean:
	case HeaderTypeArray:

	default:
		return nil, fmt.Errorf("unexpected HeaderType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HeaderType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HeaderType(ii)

	switch v {
	case HeaderTypeString:
	case HeaderTypeNumber:
	case HeaderTypeInteger:
	case HeaderTypeBoolean:
	case HeaderTypeArray:

	default:
		return fmt.Errorf("unexpected HeaderType value: %v", v)
	}

	*i = v

	return nil
}

// APIKeySecurityIn is an enum type.
type APIKeySecurityIn string

// APIKeySecurityIn values enumeration.
const (
	APIKeySecurityInHeader = APIKeySecurityIn("header")
	APIKeySecurityInQuery = APIKeySecurityIn("query")
)

// MarshalJSON encodes JSON.
func (i APIKeySecurityIn) MarshalJSON() ([]byte, error) {
	switch i {
	case APIKeySecurityInHeader:
	case APIKeySecurityInQuery:

	default:
		return nil, fmt.Errorf("unexpected APIKeySecurityIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *APIKeySecurityIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := APIKeySecurityIn(ii)

	switch v {
	case APIKeySecurityInHeader:
	case APIKeySecurityInQuery:

	default:
		return fmt.Errorf("unexpected APIKeySecurityIn value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := make([]byte, 1, 100)
	result[0] = '{'
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false
				
				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
// Regular expressions for pattern properties.
var (
	regexX = regexp.MustCompile("^x-")
	regex = regexp.MustCompile("^/")
	regex093Default = regexp.MustCompile("^([0-9]{3})$|^(default)$")
)

type unionMap struct {
	mustUnmarshal     []interface{}
	mayUnmarshal      []interface{}
	ignoreKeys        []string
	patternProperties map[*regexp.Regexp]interface{}
	jsonData          []byte
}

func (u unionMap) unmarshal() error {
	for _, item := range u.mustUnmarshal {
		// Unmarshal to struct.
		err := json.Unmarshal(u.jsonData, item)
		if err != nil {
			return err
		}
	}

	for i, item := range u.mayUnmarshal {
		// Unmarshal to struct.
		err := json.Unmarshal(u.jsonData, item)
		if err != nil {
			u.mayUnmarshal[i] = nil
		}
	}

	if len(u.patternProperties) == 0 {
		return nil
	}

	// Unmarshal to a generic map.
	var m map[string]*json.RawMessage

	err := json.Unmarshal(u.jsonData, &m)
	if err != nil {
		return err
	}

	// Remove ignored keys (defined in struct).
	for _, i := range u.ignoreKeys {
		delete(m, i)
	}

	// Return early on empty map.
	if len(m) == 0 {
		return nil
	}

	if len(u.patternProperties) != 0 {
		err = u.unmarshalPatternProperties(m)
		if err != nil {
			return err
		}
	}

	// Return early on empty map.
	if len(m) == 0 {
		return nil
	}

	return nil
}

func (u unionMap) unmarshalPatternProperties(m map[string]*json.RawMessage) error {
	patternMapsRaw := make(map[*regexp.Regexp][]byte, len(u.patternProperties))

	// Iterating map and filling pattern properties sub maps.
	for key, val := range m {
		matched := false
		ok := false
		keyEscaped := `"` + strings.Replace(key, `"`, `\"`, -1) + `":`

		for regex := range u.patternProperties {
			if regex.MatchString(key) {
				matched = true

				var subMap []byte

				if subMap, ok = patternMapsRaw[regex]; !ok {
					subMap = make([]byte, 1, 100)
					subMap[0] = '{'
				} else {
					subMap = append(subMap[:len(subMap)-1], ',')
				}

				subMap = append(subMap, []byte(keyEscaped)...)

				if val != nil {
					subMap = append(subMap, []byte(*val)...)
				} else {
					subMap = append(subMap, []byte("null")...)
				}

				subMap = append(subMap, '}')

				patternMapsRaw[regex] = subMap
			}
		}

		// Remove from properties map if matched to at least one regex.
		if matched {
			delete(m, key)
		}
	}

	for regex := range u.patternProperties {
		if subMap, ok := patternMapsRaw[regex]; !ok {
			continue
		} else {
			err := json.Unmarshal(subMap, u.patternProperties[regex])
			if err != nil {
				return err
			}
		}
	}

	return nil
}
